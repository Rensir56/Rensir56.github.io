<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TS数据类型方法积累</title>
    <link href="/2025/03/13/TS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    <url>/2025/03/13/TS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<p>JavaScript内置了很多方法来处理数据，这些方法在处理数据时非常实用，可以大大简化代码并提高可读性。在 TypeScript 中，这些方法同样适用</p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><ol><li><code>splice(start, deleteCount, ...items)</code><ul><li>作用: 从数组中添加或删除元素。</li><li>示例: <code>nums.splice(2, 1, 100);</code> 从索引 2 开始删除 1 个元素，并插入 100。</li></ul></li><li><code>slice(start, end)</code><ul><li>作用: 返回数组的一部分，不会修改原数组。</li><li>示例: <code>let subArray = nums.slice(1, 3);</code> 返回从索引 1 到 3（不包括 3）的子数组。</li></ul></li><li><code>map(callback)</code><ul><li>作用: 创建一个新数组，其元素是原数组元素经过回调函数处理后的结果。</li><li>示例: <code>let doubled = nums.map(x =&gt; x * 2);</code> 返回一个新数组，其中每个元素是原数组元素的两倍。</li></ul></li><li><code>filter(callback)</code><ul><li>作用: 创建一个新数组，包含通过回调函数测试的所有元素。</li><li>示例: <code>let evens = nums.filter(x =&gt; x % 2 === 0);</code> 返回一个新数组，包含所有偶数。</li></ul></li><li><code>reduce(callback, initialValue)</code><ul><li>作用: 对数组中的每个元素执行回调函数，返回一个累积的结果。</li><li>示例: <code>let sum = nums.reduce((acc, x) =&gt; acc + x, 0);</code> 返回数组中所有元素的和。</li></ul></li><li><code>forEach(callback)</code><ul><li>作用: 对数组中的每个元素执行回调函数，不返回新数组。</li><li>示例: <code>nums.forEach(x =&gt; console.log(x));</code> 打印数组中的每个元素。</li></ul></li><li><code>find(callback)</code><ul><li>作用: 返回数组中第一个通过回调函数测试的元素。</li><li>示例: <code>let found = nums.find(x =&gt; x &gt; 10);</code> 返回数组中第一个大于 10 的元素。</li></ul></li><li><code>findIndex(callback)</code><ul><li>作用: 返回数组中第一个通过回调函数测试的元素的索引。</li><li>示例: <code>let index = nums.findIndex(x =&gt; x &gt; 10);</code> 返回数组中第一个大于 10 的元素的索引。</li></ul></li><li><code>some(callback)</code><ul><li>作用: 测试数组中是否有至少一个元素通过回调函数测试。</li><li>示例: <code>let hasEven = nums.some(x =&gt; x % 2 === 0);</code> 返回布尔值，表示数组中是否有偶数。</li></ul></li><li><code>every(callback)</code><ul><li>作用: 测试数组中的所有元素是否都通过回调函数测试。</li><li>示例: <code>let allPositive = nums.every(x =&gt; x &gt; 0);</code> 返回布尔值，表示数组中所有元素是否都为正数。</li></ul></li><li><code>push(item)</code><ul><li>作用: 在数组末尾添加一个元素。</li><li>示例: <code>nums.push(5);</code> 在数组 nums 末尾添加元素 5。</li></ul></li><li><code>pop()</code><ul><li>作用: 移除并返回数组的最后一个元素。</li><li>示例: <code>let last = nums.pop();</code> 移除并返回数组 nums 的最后一个元素。</li></ul></li><li><code>shift()</code><ul><li>作用: 移除并返回数组的第一个元素。</li><li>示例: <code>let first = nums.shift();</code> 移除并返回数组 nums 的第一个元素。</li></ul></li><li><code>unshift(item)</code><ul><li>作用: 在数组开头添加一个元素。</li><li>示例: <code>nums.unshift(0);</code> 在数组 nums 开头添加元素 0。</li></ul></li><li><code>concat(...items)</code><ul><li>作用: 合并数组。</li><li>示例: <code>let merged = nums.concat([4, 5], [6, 7]);</code> 合并数组 nums 和 [4, 5] 以及 [6, 7]。</li></ul></li><li><code>indexOf(item)</code><ul><li>作用: 返回元素在数组中的索引。</li><li>示例: <code>let index = nums.indexOf(3);</code> 返回元素 3 在数组 nums 中的索引。</li></ul></li><li><code>includes(item)</code><ul><li>作用: 检查数组是否包含某个元素。</li><li>示例: <code>let hasThree = nums.includes(3);</code> 检查数组 nums 是否包含元素 3。</li></ul></li><li><code>sort(compareFunction)</code><ul><li>作用: 对数组进行排序。</li><li>示例: <code>nums.sort((a, b) =&gt; a - b);</code> 对数组 nums 进行升序排序。</li></ul></li><li><code>reverse()</code><ul><li>作用: 反转数组。</li><li>示例: <code>nums.reverse();</code> 反转数组 nums 中的元素顺序。</li></ul></li></ol><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><ol><li><code>Object.keys(obj)</code><ul><li>作用: 返回对象自身可枚举属性的数组。</li><li>示例: <code>let keys = Object.keys(obj);</code> 返回对象 obj 的所有键的数组。</li></ul></li><li><code>Object.values(obj)</code><ul><li>作用: 返回对象自身可枚举属性值的数组。</li><li>示例: <code>let values = Object.values(obj);</code> 返回对象 obj 的所有值的数组。</li></ul></li><li><code>Object.entries(obj)</code><ul><li>作用: 返回对象自身可枚举属性的键值对数组。</li><li>示例: <code>let entries = Object.entries(obj);</code> 返回对象 obj 的所有键值对的数组。</li></ul></li><li><code>Object.assign(target, ...sources)</code><ul><li>作用: 将一个或多个源对象的所有可枚举属性复制到目标对象。</li><li>示例: <code>let merged = Object.assign(&#123;&#125;, obj1, obj2);</code> 将 obj1 和 obj2 的属性合并到一个新对象中。</li></ul></li><li><code>Object.freeze(obj)</code><ul><li>作用: 冻结对象，使其不可修改。</li><li>示例: <code>Object.freeze(obj);</code> 冻结对象 obj，使其属性不可修改。</li></ul></li></ol><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ol><li><code>split(separator)</code><ul><li>作用: 将字符串分割成数组。</li><li>示例: <code>let parts = str.split(&#39; &#39;);</code> 将字符串 str 按空格分割成数组。</li></ul></li><li><code>join(separator)</code><ul><li>作用: 将数组中的元素连接成一个字符串。</li><li>示例: <code>let joined = arr.join(&#39;-&#39;);</code> 将数组 arr 中的元素用 - 连接成字符串。</li></ul></li><li><code>substring(start, end)</code><ul><li>作用: 返回字符串的一部分，不会修改原字符串。</li><li>示例: <code>let subStr = str.substring(1, 3);</code> 返回从索引 1 到 3（不包括 3）的子字符串。</li></ul></li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 是一种键值对的集合，其中键和值可以是任何类型的数据。Map 提供了一些方法来操作这些键值对。</p><ul><li>方法:<ol><li><code>set(key, value)</code>: 设置键值对。<ul><li>示例: <code>map.set(&#39;name&#39;, &#39;Alice&#39;);</code> 设置键 ‘name’ 对应的值为 ‘Alice’。</li></ul></li><li><code>get(key)</code>: 获取键对应的值。<ul><li>示例: <code>let name = map.get(&#39;name&#39;);</code> 获取键 ‘name’ 对应的值。</li></ul></li><li><code>has(key)</code>: 检查是否存在某个键。<ul><li>示例: <code>let hasName = map.has(&#39;name&#39;);</code> 检查 ‘name’ 是否存在于 Map 中。</li></ul></li><li><code>delete(key)</code>: 删除键值对。<ul><li>示例: <code>map.delete(&#39;name&#39;);</code> 删除键 ‘name’ 及其对应的值。</li></ul></li><li><code>clear()</code>: 清空 Map 中的所有键值对。<ul><li>示例: <code>map.clear();</code> 清空 Map 中的所有键值对。</li></ul></li><li><code>size</code>: 返回 Map 中键值对的数量。<ul><li>示例: <code>let size = map.size;</code> 获取 Map 中键值对的数量。</li></ul></li></ol></li><li>示例:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">30</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// 输出: Alice</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;age&#x27;</span>));  <span class="hljs-comment">// 输出: true</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;age&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-property">size</span>);        <span class="hljs-comment">// 输出: 1</span><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 是一种集合，其中每个值都是唯一的。Set 提供了一些方法来操作这些值。</p><ul><li>方法:<ol><li><code>add(value)</code>: 添加一个值。<ul><li>示例: <code>set.add(1);</code> 向 Set 中添加值 1。</li></ul></li><li><code>has(value)</code>: 检查是否存在某个值。<ul><li>示例: <code>let hasOne = set.has(1);</code> 检查 1 是否存在于 Set 中。</li></ul></li><li><code>delete(value)</code>: 删除某个值。<ul><li>示例: <code>set.delete(1);</code> 删除值 1。</li></ul></li><li><code>clear()</code>: 清空 Set 中的所有值。<ul><li>示例: <code>set.clear();</code> 清空 Set 中的所有值。</li></ul></li><li><code>size</code>: 返回 Set 中值的数量。<ul><li>示例: <code>let size = set.size;</code> 获取 Set 中值的数量。</li></ul></li></ol></li><li>示例:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 重复的值不会被添加</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-title function_">has</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 输出: true</span><br>set.<span class="hljs-title function_">delete</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-property">size</span>);   <span class="hljs-comment">// 输出: 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>image_test</title>
    <link href="/2025/03/08/image-test/"/>
    <url>/2025/03/08/image-test/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/08/image-test/enya.jpg" alt="测试图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/08/hello-world/"/>
    <url>/2025/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
